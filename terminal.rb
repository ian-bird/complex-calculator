# frozen_string_literal: true

require './lexeme'

# this is a lexeme generated by the lexer.
# it is read by the parser.
# it also makes up the leaves of the abstract syntax tree
class Terminal < Lexeme
  attr_reader :content, :type, :line_number
  attr_accessor :context

  # takes a rule and the part of the input that matched it.
  # converts the rule to a symbol, and the input to a string (if it wasnt already)
  # tokens are read-only.
  def initialize(rule_name, match_data, line_number = nil)
    super()
    match_data = match_data.to_s if match_data.is_a? MatchData

    @content = match_data
    @type = rule_name.to_sym
    @parent = nil
    @line_number = line_number
    @context = '' # needed for passing up data to print
  end

  def to_s
    if line_number
      "<type: #{type}, content: #{content}, line_number = #{line_number}>"
    else
      "<type: #{type}, content: #{content}>"
    end
  end

  def parent
    super()
  end

  def parent=(other)
    super(other)
  end
end
